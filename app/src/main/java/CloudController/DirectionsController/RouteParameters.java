/**
 * My Directions API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package CloudController.DirectionsController;

import com.google.gson.annotations.SerializedName;
import com.google.maps.DirectionsApi;
import com.google.maps.model.LatLng;
import com.google.maps.model.TrafficModel;
import com.google.maps.model.TransitMode;
import com.google.maps.model.TransitRoutingPreference;
import com.google.maps.model.TravelMode;
import com.google.maps.model.Unit;

import java.math.BigDecimal;
import java.util.List;

public class RouteParameters {

  public RouteParameters(String origin,String destination)
  {
    this.originName = origin;
    this.destinationName = destination;
  }

  @SerializedName("originName")
  private String originName = null;
  @SerializedName("destinationName")
  private String destinationName = null;
  @SerializedName("origin")
  private LatLng origin = null;
  @SerializedName("destination")
  private LatLng destination = null;
  @SerializedName("travelMode")
  private TravelMode travelMode = null;
  @SerializedName("avoid")
  private List<DirectionsApi.RouteRestriction> avoid = null;
  @SerializedName("units")
  private Unit units = null;
  @SerializedName("region")
  private String region = null;
  @SerializedName("arrivalTime")
  private BigDecimal arrivalTime = null;
  @SerializedName("departureTime")
  private BigDecimal departureTime = null;
  @SerializedName("places")
  private List<String> places = null;
  @SerializedName("waypoints")
  private List<LatLng> waypoints = null;
  @SerializedName("alternatives")
  private Boolean alternatives = null;
  @SerializedName("transitMode")
  private List<TransitMode> transitMode = null;
  @SerializedName("transitRoutingPreference")
  private List<TransitRoutingPreference> transitRoutingPreference = null;
  @SerializedName("traficModel")
  private TrafficModel trafficModel = null;

  public boolean isSetOrigin = false;
  public boolean isSetDestination = false;
  public boolean isSetTravelMode = false;
  public boolean isSetAvoid = false;
  public boolean isSetUnits = false;
  public boolean isSetRegion = false;
  public boolean isSetArrivalTime = false;
  public boolean isSetDepartureTime = false;
  public boolean isSetPlaces = false;
  public boolean isSetWaypoints = false;
  public boolean isSetAlternatives = false;
  public boolean isSetTransmitMode = false;
  public boolean isSetTransitRoutingPreference = false;
  public boolean isSetTraficModel = false;

  /**
   * origin by Name
   **/
  public String getOriginName() {
    return originName;
  }
  public void setOriginName(String originName) {
    this.originName = originName;
  }

  /**
   * destination by Name
   **/
  public String getDestinationName() {
    return destinationName;
  }
  public void setDestinationName(String destinationName) {
    this.destinationName = destinationName;
  }

  /**
   * origin by GEO
   **/
  public LatLng getOrigin() {
    return origin;
  }
  public void setOrigin(LatLng origin) {
    this.origin = origin;
    isSetOrigin = true;
  }

  /**
   * destination by GEO
   **/
  public LatLng getDestination() {
    return destination;
  }
  public void setDestination(LatLng destination) {
    this.destination = destination;
    isSetDestination = true;
  }

  /**
   * Choose how to travel - Driving,Walking,Bicycling,transit,unknown
   **/
  public TravelMode getTravelMode() {
    return travelMode;
  }
  public void setTravelMode(TravelMode travelMode) {
    this.travelMode = travelMode;
    isSetTravelMode = true;
  }

  /**
   * Avoid options - Tolls,Highways,Ferries
   **/
  public List<DirectionsApi.RouteRestriction> getAvoid() {
    return avoid;
  }
  public void setAvoid(List<DirectionsApi.RouteRestriction> avoid) {
    this.avoid = avoid;
    isSetAvoid = true;
  }

  /**
   * Unit system - Metric,Imperial
   **/
  public Unit getUnits() {
    return units;
  }
  public void setUnits(Unit units) {
    this.units = units;
    isSetUnits = true;
  }

  /**
   * The region code, specified as a ccTLD
   **/
  public String getRegion() {
    return region;
  }
  public void setRegion(String region) {
    this.region = region;
    isSetRegion = true;
  }

  /**
   * time to arrive in millis sence epoc
   **/
  public BigDecimal getArrivalTime() {
    return arrivalTime;
  }
  public void setArrivalTime(BigDecimal arrivalTime) {
    this.arrivalTime = arrivalTime;
    isSetArrivalTime = true;
  }

  /**
   * time to depart in millis sence epoc
   **/
  public BigDecimal getDepartureTime() {
    return departureTime;
  }
  public void setDepartureTime(BigDecimal departureTime) {
    this.departureTime = departureTime;
    isSetDepartureTime = true;
  }

  /**
   * Places to include in the route
   **/
  public List<String> getPlaces() {
    return places;
  }
  public void setPlaces(List<String> places) {
    this.places = places;
    isSetPlaces = true;
  }

  /**
   * Waypoints to include in the route in GEO
   **/
  public List<LatLng> getWaypoints() {
    return waypoints;
  }
  public void setWaypoints(List<LatLng> waypoints) {
    this.waypoints = waypoints;
    isSetWaypoints = true;
  }

  /**
   * Whether retuning one route or multiple choices
   **/
  public Boolean getAlternatives() {
    return alternatives;
  }
  public void setAlternatives(Boolean alternatives) {
    this.alternatives = alternatives;
    isSetAlternatives = true;
  }

  /**
   * Transmit mode - Bus,Subway,Train,Tram
   **/
  public List<TransitMode> getTransmitMode() {
    return transitMode;
  }
  public void setTransmitMode(List<TransitMode> transmitMode) {
    this.transitMode = transmitMode;
    isSetTransmitMode = true;
  }

  /**
   * Rounting prefernces - Less walking, fewer transfers
   **/
  public List<TransitRoutingPreference> getTransitRoutingPreference() {
    return transitRoutingPreference;
  }
  public void setTransitRoutingPreference(List<TransitRoutingPreference> transitRoutingPreference) {
    this.transitRoutingPreference = transitRoutingPreference;
    isSetTransitRoutingPreference = true;
  }

  /**
   * How to calculate times - best guess, Optimistic, Pasimistic
   **/
  public TrafficModel getTraficModel() {
    return trafficModel;
  }
  public void setTraficModel(TrafficModel traficModel) {
    this.trafficModel = traficModel;
    isSetTraficModel = true;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteParameters routeParameters = (RouteParameters) o;
    return (this.origin == null ? routeParameters.origin == null : this.origin.equals(routeParameters.origin)) &&
        (this.destination == null ? routeParameters.destination == null : this.destination.equals(routeParameters.destination)) &&
        (this.travelMode == null ? routeParameters.travelMode == null : this.travelMode.equals(routeParameters.travelMode)) &&
        (this.avoid == null ? routeParameters.avoid == null : this.avoid.equals(routeParameters.avoid)) &&
        (this.units == null ? routeParameters.units == null : this.units.equals(routeParameters.units)) &&
        (this.region == null ? routeParameters.region == null : this.region.equals(routeParameters.region)) &&
        (this.arrivalTime == null ? routeParameters.arrivalTime == null : this.arrivalTime.equals(routeParameters.arrivalTime)) &&
        (this.departureTime == null ? routeParameters.departureTime == null : this.departureTime.equals(routeParameters.departureTime)) &&
        (this.places == null ? routeParameters.places == null : this.places.equals(routeParameters.places)) &&
        (this.waypoints == null ? routeParameters.waypoints == null : this.waypoints.equals(routeParameters.waypoints)) &&
        (this.alternatives == null ? routeParameters.alternatives == null : this.alternatives.equals(routeParameters.alternatives)) &&
        (this.transitMode == null ? routeParameters.transitMode == null : this.transitMode.equals(routeParameters.transitMode)) &&
        (this.transitRoutingPreference == null ? routeParameters.transitRoutingPreference == null : this.transitRoutingPreference.equals(routeParameters.transitRoutingPreference)) &&
        (this.trafficModel == null ? routeParameters.trafficModel == null : this.trafficModel.equals(routeParameters.trafficModel));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.origin == null ? 0: this.origin.hashCode());
    result = 31 * result + (this.destination == null ? 0: this.destination.hashCode());
    result = 31 * result + (this.travelMode == null ? 0: this.travelMode.hashCode());
    result = 31 * result + (this.avoid == null ? 0: this.avoid.hashCode());
    result = 31 * result + (this.units == null ? 0: this.units.hashCode());
    result = 31 * result + (this.region == null ? 0: this.region.hashCode());
    result = 31 * result + (this.arrivalTime == null ? 0: this.arrivalTime.hashCode());
    result = 31 * result + (this.departureTime == null ? 0: this.departureTime.hashCode());
    result = 31 * result + (this.places == null ? 0: this.places.hashCode());
    result = 31 * result + (this.waypoints == null ? 0: this.waypoints.hashCode());
    result = 31 * result + (this.alternatives == null ? 0: this.alternatives.hashCode());
    result = 31 * result + (this.transitMode == null ? 0: this.transitMode.hashCode());
    result = 31 * result + (this.transitRoutingPreference == null ? 0: this.transitRoutingPreference.hashCode());
    result = 31 * result + (this.trafficModel == null ? 0: this.trafficModel.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteParameters {\n");
    
    sb.append("  origin: ").append(origin).append("\n");
    sb.append("  destination: ").append(destination).append("\n");
    sb.append("  travelMode: ").append(travelMode).append("\n");
    sb.append("  avoid: ").append(avoid).append("\n");
    sb.append("  units: ").append(units).append("\n");
    sb.append("  region: ").append(region).append("\n");
    sb.append("  arrivalTime: ").append(arrivalTime).append("\n");
    sb.append("  departureTime: ").append(departureTime).append("\n");
    sb.append("  places: ").append(places).append("\n");
    sb.append("  waypoints: ").append(waypoints).append("\n");
    sb.append("  alternatives: ").append(alternatives).append("\n");
    sb.append("  transmitMode: ").append(transitMode).append("\n");
    sb.append("  transitRoutingPreference: ").append(transitRoutingPreference).append("\n");
    sb.append("  traficModel: ").append(trafficModel).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
