/**
 * My Directions API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import io.swagger.client.model.GeoLocation;
import java.math.BigDecimal;
import java.util.*;
import io.swagger.annotations.*;
import com.google.gson.annotations.SerializedName;

@ApiModel(description = "")
public class RouteParameters {
  
  @SerializedName("origin")
  private Object origin = null;
  @SerializedName("destination")
  private Object destination = null;
  public enum TravelModeEnum {
     DRIVING,  WALKING,  BICYCLING,  TRANSIT,  UNKNOWN, 
  };
  @SerializedName("travelMode")
  private TravelModeEnum travelMode = null;
  public enum AvoidEnum {
     TOLLS,  HIGHWAYS,  FERRIES, 
  };
  @SerializedName("avoid")
  private AvoidEnum avoid = null;
  public enum UnitsEnum {
     METRIC,  IMPERIAL, 
  };
  @SerializedName("units")
  private UnitsEnum units = null;
  @SerializedName("region")
  private String region = null;
  @SerializedName("arrivalTime")
  private BigDecimal arrivalTime = null;
  @SerializedName("departureTime")
  private BigDecimal departureTime = null;
  @SerializedName("places")
  private List<String> places = null;
  @SerializedName("waypoints")
  private List<GeoLocation> waypoints = null;
  @SerializedName("alternatives")
  private Boolean alternatives = null;
  public enum TransmitModeEnum {
     BUS,  SUBWAY,  TRAIN,  TRAM, 
  };
  @SerializedName("transmitMode")
  private TransmitModeEnum transmitMode = null;
  public enum TransitRoutingPreferenceEnum {
     LESS_WALKING,  FEWER_TRANSFERS, 
  };
  @SerializedName("transitRoutingPreference")
  private TransitRoutingPreferenceEnum transitRoutingPreference = null;
  public enum TraficModelEnum {
     BEST_GUESS,  OPTIMISTIC,  PESSIMISTIC, 
  };
  @SerializedName("traficModel")
  private TraficModelEnum traficModel = null;

  /**
   * origin by GEO
   **/
  @ApiModelProperty(value = "origin by GEO")
  public Object getOrigin() {
    return origin;
  }
  public void setOrigin(Object origin) {
    this.origin = origin;
  }

  /**
   * destination by GEO
   **/
  @ApiModelProperty(value = "destination by GEO")
  public Object getDestination() {
    return destination;
  }
  public void setDestination(Object destination) {
    this.destination = destination;
  }

  /**
   * Choose how to travel - Driving,Walking,Bicycling,transit,unknown
   **/
  @ApiModelProperty(value = "Choose how to travel - Driving,Walking,Bicycling,transit,unknown")
  public TravelModeEnum getTravelMode() {
    return travelMode;
  }
  public void setTravelMode(TravelModeEnum travelMode) {
    this.travelMode = travelMode;
  }

  /**
   * Avoid options - Tolls,Highways,Ferries
   **/
  @ApiModelProperty(value = "Avoid options - Tolls,Highways,Ferries")
  public AvoidEnum getAvoid() {
    return avoid;
  }
  public void setAvoid(AvoidEnum avoid) {
    this.avoid = avoid;
  }

  /**
   * Unit system - Metric,Imperial
   **/
  @ApiModelProperty(value = "Unit system - Metric,Imperial")
  public UnitsEnum getUnits() {
    return units;
  }
  public void setUnits(UnitsEnum units) {
    this.units = units;
  }

  /**
   * The region code, specified as a ccTLD
   **/
  @ApiModelProperty(value = "The region code, specified as a ccTLD")
  public String getRegion() {
    return region;
  }
  public void setRegion(String region) {
    this.region = region;
  }

  /**
   * time to arrive in millis sence epoc
   **/
  @ApiModelProperty(value = "time to arrive in millis sence epoc")
  public BigDecimal getArrivalTime() {
    return arrivalTime;
  }
  public void setArrivalTime(BigDecimal arrivalTime) {
    this.arrivalTime = arrivalTime;
  }

  /**
   * time to depart in millis sence epoc
   **/
  @ApiModelProperty(value = "time to depart in millis sence epoc")
  public BigDecimal getDepartureTime() {
    return departureTime;
  }
  public void setDepartureTime(BigDecimal departureTime) {
    this.departureTime = departureTime;
  }

  /**
   * Places to include in the route
   **/
  @ApiModelProperty(value = "Places to include in the route")
  public List<String> getPlaces() {
    return places;
  }
  public void setPlaces(List<String> places) {
    this.places = places;
  }

  /**
   * Waypoints to include in the route in GEO
   **/
  @ApiModelProperty(value = "Waypoints to include in the route in GEO")
  public List<GeoLocation> getWaypoints() {
    return waypoints;
  }
  public void setWaypoints(List<GeoLocation> waypoints) {
    this.waypoints = waypoints;
  }

  /**
   * Whether retuning one route or multiple choices
   **/
  @ApiModelProperty(value = "Whether retuning one route or multiple choices")
  public Boolean getAlternatives() {
    return alternatives;
  }
  public void setAlternatives(Boolean alternatives) {
    this.alternatives = alternatives;
  }

  /**
   * Transmit mode - Bus,Subway,Train,Tram
   **/
  @ApiModelProperty(value = "Transmit mode - Bus,Subway,Train,Tram")
  public TransmitModeEnum getTransmitMode() {
    return transmitMode;
  }
  public void setTransmitMode(TransmitModeEnum transmitMode) {
    this.transmitMode = transmitMode;
  }

  /**
   * Rounting prefernces - Less walking, fewer transfers
   **/
  @ApiModelProperty(value = "Rounting prefernces - Less walking, fewer transfers")
  public TransitRoutingPreferenceEnum getTransitRoutingPreference() {
    return transitRoutingPreference;
  }
  public void setTransitRoutingPreference(TransitRoutingPreferenceEnum transitRoutingPreference) {
    this.transitRoutingPreference = transitRoutingPreference;
  }

  /**
   * How to calculate times - best guess, Optimistic, Pasimistic
   **/
  @ApiModelProperty(value = "How to calculate times - best guess, Optimistic, Pasimistic")
  public TraficModelEnum getTraficModel() {
    return traficModel;
  }
  public void setTraficModel(TraficModelEnum traficModel) {
    this.traficModel = traficModel;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RouteParameters routeParameters = (RouteParameters) o;
    return (this.origin == null ? routeParameters.origin == null : this.origin.equals(routeParameters.origin)) &&
        (this.destination == null ? routeParameters.destination == null : this.destination.equals(routeParameters.destination)) &&
        (this.travelMode == null ? routeParameters.travelMode == null : this.travelMode.equals(routeParameters.travelMode)) &&
        (this.avoid == null ? routeParameters.avoid == null : this.avoid.equals(routeParameters.avoid)) &&
        (this.units == null ? routeParameters.units == null : this.units.equals(routeParameters.units)) &&
        (this.region == null ? routeParameters.region == null : this.region.equals(routeParameters.region)) &&
        (this.arrivalTime == null ? routeParameters.arrivalTime == null : this.arrivalTime.equals(routeParameters.arrivalTime)) &&
        (this.departureTime == null ? routeParameters.departureTime == null : this.departureTime.equals(routeParameters.departureTime)) &&
        (this.places == null ? routeParameters.places == null : this.places.equals(routeParameters.places)) &&
        (this.waypoints == null ? routeParameters.waypoints == null : this.waypoints.equals(routeParameters.waypoints)) &&
        (this.alternatives == null ? routeParameters.alternatives == null : this.alternatives.equals(routeParameters.alternatives)) &&
        (this.transmitMode == null ? routeParameters.transmitMode == null : this.transmitMode.equals(routeParameters.transmitMode)) &&
        (this.transitRoutingPreference == null ? routeParameters.transitRoutingPreference == null : this.transitRoutingPreference.equals(routeParameters.transitRoutingPreference)) &&
        (this.traficModel == null ? routeParameters.traficModel == null : this.traficModel.equals(routeParameters.traficModel));
  }

  @Override
  public int hashCode() {
    int result = 17;
    result = 31 * result + (this.origin == null ? 0: this.origin.hashCode());
    result = 31 * result + (this.destination == null ? 0: this.destination.hashCode());
    result = 31 * result + (this.travelMode == null ? 0: this.travelMode.hashCode());
    result = 31 * result + (this.avoid == null ? 0: this.avoid.hashCode());
    result = 31 * result + (this.units == null ? 0: this.units.hashCode());
    result = 31 * result + (this.region == null ? 0: this.region.hashCode());
    result = 31 * result + (this.arrivalTime == null ? 0: this.arrivalTime.hashCode());
    result = 31 * result + (this.departureTime == null ? 0: this.departureTime.hashCode());
    result = 31 * result + (this.places == null ? 0: this.places.hashCode());
    result = 31 * result + (this.waypoints == null ? 0: this.waypoints.hashCode());
    result = 31 * result + (this.alternatives == null ? 0: this.alternatives.hashCode());
    result = 31 * result + (this.transmitMode == null ? 0: this.transmitMode.hashCode());
    result = 31 * result + (this.transitRoutingPreference == null ? 0: this.transitRoutingPreference.hashCode());
    result = 31 * result + (this.traficModel == null ? 0: this.traficModel.hashCode());
    return result;
  }

  @Override
  public String toString()  {
    StringBuilder sb = new StringBuilder();
    sb.append("class RouteParameters {\n");
    
    sb.append("  origin: ").append(origin).append("\n");
    sb.append("  destination: ").append(destination).append("\n");
    sb.append("  travelMode: ").append(travelMode).append("\n");
    sb.append("  avoid: ").append(avoid).append("\n");
    sb.append("  units: ").append(units).append("\n");
    sb.append("  region: ").append(region).append("\n");
    sb.append("  arrivalTime: ").append(arrivalTime).append("\n");
    sb.append("  departureTime: ").append(departureTime).append("\n");
    sb.append("  places: ").append(places).append("\n");
    sb.append("  waypoints: ").append(waypoints).append("\n");
    sb.append("  alternatives: ").append(alternatives).append("\n");
    sb.append("  transmitMode: ").append(transmitMode).append("\n");
    sb.append("  transitRoutingPreference: ").append(transitRoutingPreference).append("\n");
    sb.append("  traficModel: ").append(traficModel).append("\n");
    sb.append("}\n");
    return sb.toString();
  }
}
